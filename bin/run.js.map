{"version":3,"sources":["../src/run.ts","../src/templates.ts","../src/actions.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Argument, Command } from 'commander';\nimport chalk from 'chalk';\nimport inquirer from \"inquirer\";\nimport { templates } from './templates';\nimport ora from 'ora';\nimport Actions from './actions';\nimport { basename, join } from 'node:path';\nimport { slugify } from '@h3ravel/support';\n\nconst program = new Command();\n\nprogram\n    .name('create-h3ravel')\n    .description('CLI to create new h3ravel app')\n    .version('0.1.0');\n\nprogram\n    .option(\"-n, --name <string>\", \"The name of your project.\")\n    .option('-i, --install', 'Install node_modules right away.')\n    .option('-t, --token <string>', 'Kit repo authentication token.')\n    .option('-d, --desc <string>', 'Project Description.')\n    .option('-k, --kit <string>\", \"Starter template kit')\n    .addArgument(new Argument('[location]', 'The location where this project should be created relative to the current dir.'))\n    .action(async (pathName, options) => {\n\n        let { appName, description } = await inquirer\n            .prompt([\n                {\n                    type: \"input\",\n                    name: \"appName\",\n                    message: \"What is the name of your project:\",\n                    default: 'h3ravel',\n                    when: () => !options.name,\n                },\n                {\n                    type: \"input\",\n                    name: \"description\",\n                    message: \"Project Description:\",\n                    when: () => !options.desc,\n                }]\n            )\n\n        let { template, install, location, token } = await inquirer\n            .prompt([{\n                type: \"input\",\n                name: \"location\",\n                message: \"Installation location relative to the current dir:\",\n                default: slugify(options.name ?? appName ?? basename(process.cwd()), '-'),\n                when: () => !pathName,\n            },\n            {\n                type: \"list\",\n                name: \"template\",\n                message: \"Choose starter template kit:\",\n                choices: <never>templates.map(e => ({\n                    name: e.name,\n                    value: e.alias,\n                    disabled: !e.source ? '(Unavailable at this time)' : false,\n                })),\n                default: 'full',\n                when: () => !options.kit,\n            },\n            {\n                type: \"input\",\n                name: \"token\",\n                message: \"Authentication token:\",\n                when: () => options.kit && !options.token,\n            },\n            {\n                type: 'confirm',\n                name: \"install\",\n                message: \"Would you want to install node_modules right away:\",\n                default: true,\n                when: () => !options.install,\n            },\n            ])\n\n        token = options.token ?? token\n        appName = options.name ?? appName\n        install = options.install ?? install\n        template = options.kit ?? template\n        location = pathName ?? location\n        description = options.description ?? description\n\n        const kit = templates.find(e => e.alias === template)!\n\n        if (kit && !kit.source) {\n            console.log(chalk.bgRed(' Error: '), chalk.red(`The ${kit.name} kit is not currently available`))\n            process.exit(1)\n        }\n\n        const actions = new Actions(join(process.cwd(), location), appName, description);\n\n        const spinner = ora(`Loading Template...`).start();\n        await actions.download(kit?.source ?? template, install);\n\n        spinner.info(chalk.green(\"Cleaning Up...\")).start();\n        await actions.cleanup()\n\n        spinner.info(chalk.green(\"Creating .env...\")).start();\n        await actions.copyExampleEnv()\n\n        spinner.succeed(chalk.green('Template Downloaded!'))\n\n        await actions.complete()\n    });\n\nprogram.parse();\n","/*\n * create-h3ravel\n *\n * (c) H3ravel Framework\n *\n * The H3ravel framework and all it's base packages are \n * open-sourced software licensed under the MIT license.\n */\n\n/**\n * List of first party templates\n */\nexport const templates = [\n    {\n        name: 'Full Starter Kit',\n        alias: 'full',\n        hint: 'A full H3ravel application with everything possible',\n        source: 'github:h3ravel/h3ravel',\n    },\n    {\n        name: 'Lean Starter Kit',\n        alias: 'lean',\n        hint: 'A lean H3ravel application with just the framework core',\n        source: null,\n    },\n    {\n        name: 'API Starter Kit',\n        alias: 'api',\n        hint: 'Creates a H3ravel application for building JSON APIs',\n        source: null\n    },\n    {\n        name: 'Web Starter Kit',\n        alias: 'web',\n        hint: 'Creates a H3ravel application for building a server rendered app',\n        source: null\n    },\n    {\n        name: 'Inertia Starter Kit',\n        alias: 'inertia',\n        hint: 'Inertia application with a frontend framework of your choice',\n        source: null\n    },\n]\n","import { basename, join, relative } from \"node:path\";\nimport { copyFile, readFile, rm, writeFile } from \"node:fs/promises\";\nimport { detectPackageManager, installPackage } from \"@antfu/install-pkg\";\n\nimport chalk from \"chalk\";\nimport { downloadTemplate } from \"giget\";\nimport { existsSync } from \"node:fs\";\nimport { slugify } from \"@h3ravel/support\";\nimport { unlink } from \"node:fs/promises\";\n\nexport default class {\n    skipInstallation?: boolean\n\n    constructor(private location?: string, private appName?: string, private description?: string) {\n        if (!this.location) {\n            this.location = join(process.cwd(), '.temp')\n        }\n    }\n\n    async download (template: string, install = false, auth?: string) {\n        if (this.location?.includes('.temp')) {\n            await rm(this.location!, { force: true, recursive: true })\n        }\n\n        this.skipInstallation = !install\n        this.removeLockFile()\n\n        return await downloadTemplate(template, {\n            dir: this.location,\n            auth,\n            install,\n            registry: (await detectPackageManager()) ?? 'npm',\n            forceClean: false\n        });\n    }\n\n    async installPackage (name: string) {\n        await installPackage(name, {\n            cwd: this.location,\n            silent: true,\n        })\n    }\n\n    async complete () {\n        const packageManager = (await detectPackageManager()) ?? 'npm'\n        console.log('')\n        console.log('Your h3ravel project has been created successfully!')\n        console.log(chalk.cyan('cd ' + relative(process.cwd(), this.location!)))\n        console.log(chalk.cyan(`${packageManager} run dev`))\n        console.log(chalk.cyan('Open http://localhost:4444'))\n        console.log('')\n        console.log(`Have any questions?`)\n        console.log(`Join our Discord server - ${chalk.yellow('https://discord.gg/hsG2A8PuGb')}`)\n    }\n\n    async cleanup () {\n        const pkgPath = join(this.location!, 'package.json')\n        const pkg = await readFile(pkgPath!, 'utf-8').then(JSON.parse)\n\n        delete pkg.packageManager\n        pkg.name = slugify(this.appName ?? basename(this.location!).replace('.', ''), '-')\n        if (this.description) {\n            pkg.description = this.description\n        }\n\n        await Promise.allSettled([\n            writeFile(pkgPath, JSON.stringify(pkg, null, 2)),\n            this.removeLockFile(),\n            rm(join(this.location!, 'pnpm-workspace.yaml'), { force: true }),\n            rm(join(this.location!, 'README.md'), { force: true }),\n            rm(join(this.location!, '.github'), { force: true, recursive: true }),\n        ])\n    }\n\n    async removeLockFile () {\n        if (!this.skipInstallation) {\n            return\n        }\n\n        await Promise.allSettled([\n            unlink(join(this.location!, 'package-lock.json')),\n            unlink(join(this.location!, 'yarn.lock')),\n            unlink(join(this.location!, 'pnpm-lock.yaml')),\n        ])\n    }\n\n    async getBanner () {\n        return await readFile(join(process.cwd(), './logo.txt'), 'utf-8')\n    }\n\n    async copyExampleEnv () {\n        const envPath = join(this.location!, '.env')\n        const exampleEnvPath = join(this.location!, '.env.example')\n\n        if (existsSync(exampleEnvPath)) {\n            await copyFile(exampleEnvPath, envPath)\n        }\n    }\n}\n"],"mappings":"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","names":["Argument","Command","chalk","inquirer","templates","name","alias","hint","source","ora","basename","join","relative","copyFile","readFile","rm","writeFile","detectPackageManager","installPackage","chalk","downloadTemplate","existsSync","slugify","unlink","skipInstallation","location","appName","description","join","process","cwd","download","template","install","auth","includes","rm","force","recursive","removeLockFile","downloadTemplate","dir","registry","detectPackageManager","forceClean","installPackage","name","silent","complete","packageManager","console","log","chalk","cyan","relative","yellow","cleanup","pkgPath","pkg","readFile","then","JSON","parse","slugify","basename","replace","Promise","allSettled","writeFile","stringify","unlink","getBanner","copyExampleEnv","envPath","exampleEnvPath","existsSync","copyFile","basename","join","slugify","program","Command","name","description","version","option","addArgument","Argument","action","pathName","options","appName","inquirer","prompt","type","message","default","when","desc","template","install","location","token","slugify","basename","process","cwd","choices","templates","map","e","value","alias","disabled","source","kit","find","console","log","chalk","bgRed","red","exit","actions","Actions","join","spinner","ora","start","download","info","green","cleanup","copyExampleEnv","succeed","complete","parse"]}