{"version":3,"sources":["../src/run.ts","../src/templates.ts","../src/actions.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport inquirer from \"inquirer\";\nimport { templates } from './templates';\nimport ora from 'ora';\nimport Actions from './actions';\nimport { join } from 'node:path';\n\nconst program = new Command();\n\nprogram\n    .name('create-h3ravel')\n    .description('CLI to create new h3ravel app')\n    .version('0.1.0');\n\nprogram\n    .option(\"-n, --name <type>\", \"Add your name\")\n    .action(async (options) => {\n        console.log(options)\n\n        const { appName, template, install } = await inquirer\n            .prompt([\n                {\n                    type: \"input\",\n                    name: \"appName\",\n                    message: \"What is the name of your project?\",\n                    default: 'h3ravel'\n                },\n                {\n                    type: \"list\",\n                    name: \"template\",\n                    message: \"Select starter template\",\n                    choices: <never>templates.map(e => ({\n                        name: e.name,\n                        value: e.alias,\n                        disabled: !e.source ? '(Unavailable at this time)' : false,\n                    })),\n                },\n                {\n                    type: 'confirm',\n                    name: \"install\",\n                    message: \"Would you want to install node_modules right away?\",\n                    default: true,\n                },\n            ])\n\n        const actions = new Actions(join(process.cwd(), String(appName).toLowerCase().replaceAll(' ', '-')));\n\n        const spinner = ora(`Loading Template...`).start();\n        await actions.download(templates.find(e => e.alias === template)?.source!, install);\n\n        spinner.info(chalk.green(\"Cleaning Up...\")).start();\n        await actions.cleanup()\n\n        spinner.info(chalk.green(\"Creating .env...\")).start();\n        await actions.copyExampleEnv()\n\n        spinner.succeed(chalk.green('Template Downloaded!'))\n\n        await actions.complete()\n    });\n\nprogram.parse();\n","/*\n * create-h3ravel\n *\n * (c) H3ravel Framework\n *\n * The H3ravel framework and all it's base packages are \n * open-sourced software licensed under the MIT license.\n */\n\n/**\n * List of first party templates\n */\nexport const templates = [\n    {\n        name: 'Full Starter Kit',\n        alias: 'full',\n        hint: 'A full H3ravel application with everything possible',\n        source: 'github:h3ravel/h3ravel',\n    },\n    {\n        name: 'Lean Starter Kit',\n        alias: 'lean',\n        hint: 'A lean H3ravel application with just the framework core',\n        source: null,\n    },\n    {\n        name: 'API Starter Kit',\n        alias: 'api',\n        hint: 'Creates a H3ravel application for building JSON APIs',\n        source: null\n    },\n    {\n        name: 'Web Starter Kit',\n        alias: 'web',\n        hint: 'Creates a H3ravel application for building a server rendered app',\n        source: null\n    },\n    {\n        name: 'Inertia Starter Kit',\n        alias: 'inertia',\n        hint: 'Inertia application with a frontend framework of your choice',\n        source: null\n    },\n]\n","import { basename, join, relative } from \"node:path\";\nimport { copyFile, readFile, rm, writeFile } from \"node:fs/promises\";\nimport { detectPackageManager, installPackage } from \"@antfu/install-pkg\";\n\nimport chalk from \"chalk\";\nimport { downloadTemplate } from \"giget\";\nimport { existsSync } from \"node:fs\";\nimport { unlink } from \"node:fs/promises\";\n\nexport default class {\n    constructor(private destination?: string) {\n        if (!this.destination) {\n            this.destination = join(process.cwd(), '.temp')\n        }\n    }\n\n    async download (template: string, install = false, auth?: string) {\n        if (this.destination?.includes('.temp')) {\n            await rm(this.destination!, { force: true, recursive: true })\n        }\n\n        return await downloadTemplate(template, {\n            dir: this.destination,\n            auth,\n            install,\n            registry: false,\n            forceClean: true\n        });\n    }\n\n    async install () {\n        await installPackage('@h3ravel/core', {\n            cwd: this.destination,\n            silent: true,\n        })\n    }\n\n    async complete () {\n        const packageManager = (await detectPackageManager()) ?? 'npm'\n        console.log('')\n        console.log('Your h3ravel project has been created successfully!')\n        console.log(chalk.cyan('cd ' + relative(process.cwd(), this.destination!)))\n        console.log(chalk.cyan(`${packageManager} run dev`))\n        console.log(chalk.cyan('Open http://localhost:4444'))\n        console.log('')\n        console.log(`Have any questions?`)\n        console.log(`Join our Discord server - ${chalk.yellow('https://discord.gg/hsG2A8PuGb')}`)\n    }\n\n    async cleanup () {\n        const pkgPath = join(this.destination!, 'package.json')\n        const pkg = await readFile(pkgPath!, 'utf-8').then(JSON.parse)\n\n        delete pkg.packageManager\n        pkg.name = basename(this.destination!).replace('.', '')\n\n        await Promise.allSettled([\n            writeFile(pkgPath, JSON.stringify(pkg, null, 2)),\n            unlink(join(this.destination!, 'package-lock.json')),\n            unlink(join(this.destination!, 'yarn.lock')),\n            unlink(join(this.destination!, 'pnpm-lock.yaml')),\n            rm(join(this.destination!, 'pnpm-workspace.yaml'), { force: true }),\n            rm(join(this.destination!, 'README.md'), { force: true }),\n            rm(join(this.destination!, '.github'), { force: true, recursive: true }),\n        ])\n    }\n\n    async getBanner () {\n        return await readFile(join(process.cwd(), './logo.txt'), 'utf-8')\n    }\n\n    async copyExampleEnv () {\n        const envPath = join(this.destination!, '.env')\n        const exampleEnvPath = join(this.destination!, '.env.example')\n\n        if (existsSync(exampleEnvPath)) {\n            await copyFile(exampleEnvPath, envPath)\n        }\n    }\n}\n"],"mappings":"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","names":["Command","chalk","inquirer","templates","name","alias","hint","source","ora","basename","join","relative","copyFile","readFile","rm","writeFile","detectPackageManager","installPackage","chalk","downloadTemplate","existsSync","unlink","destination","join","process","cwd","download","template","install","auth","includes","rm","force","recursive","downloadTemplate","dir","registry","forceClean","installPackage","silent","complete","packageManager","detectPackageManager","console","log","chalk","cyan","relative","yellow","cleanup","pkgPath","pkg","readFile","then","JSON","parse","name","basename","replace","Promise","allSettled","writeFile","stringify","unlink","getBanner","copyExampleEnv","envPath","exampleEnvPath","existsSync","copyFile","join","program","Command","name","description","version","option","action","options","console","log","appName","template","install","inquirer","prompt","type","message","default","choices","templates","map","e","value","alias","disabled","source","actions","Actions","process","cwd","String","toLowerCase","replaceAll","spinner","ora","start","download","find","info","chalk","green","cleanup","copyExampleEnv","succeed","complete","parse"]}